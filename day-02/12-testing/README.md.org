* Pruebas unitarias
  :PROPERTIES:
  :CUSTOM_ID: pruebas-unitarias
  :END:

Golang incluye en el paquete [[https://pkg.go.dev/testing][testing]] las herramientas necesarias para
hacer pruebas unitarias. Por convención las pruebas unitarias se
incluyen en el mismo paquete de la funcionalidad a probar, adicionando
a los archivos el sufijo =_test=.

Además de pruebas unitarias, Golang nos permite escribir pruebas de
rendimiento o /benchmarks/ y ejemplos de prueba.

** Nuestra primera prueba unitaria.
   :PROPERTIES:
   :CUSTOM_ID: nuestra-primera-prueba-unitaria.
   :END:

Si tenemos una función para calcular los números de fibonacci.

#+begin_src go
  func Fibonacci(n int) int {
      if n < 2 {
          return n
      }
      return Fibonacci(n-1) + Fibonacci(n-2)
  }
#+end_src

*** Pruebas unitarias

#+begin_src go
  func TestFibonacci(t *testing.T) {
      var in int = 10
      var want int = 55

      got := Fibonacci(in)
      if got != want {
          t.Errorf("Fibonacci(%d) == %d, want %d", in, got, want)
      }
  }
#+end_src

*** Pruebas de ejemplo


Los ejemplos además de ejecutar pruebas, son una forma de documentar el
uso de funcionalidades.

#+begin_src go
  func ExampleFibonacci() {
      fmt.Println(Fibonacci(10))
      // Output: 55
  }
#+end_src

#+REVEAL: split

Tanto las pruebas unitarias como los ejemplos se ejecutan utilizando el
comando =go test=.

** Benchmarks
   :PROPERTIES:
   :CUSTOM_ID: benchmarks
   :END:

Un /benchmark/ o prueba de rendimiento nos permite examinar el desempeño
de nuestras funcionalidades.

#+begin_src go
  func BenchmarkFibonacci(b *testing.B) {
          for n := 0; n < b.N; n++ {
                  Fibonacci(10)
          }
  }
#+end_src

** Datos de pruebas o fixtures
   :PROPERTIES:
   :CUSTOM_ID: datos-de-pruebas-o-fixtures
   :END:

Por convención, Golang ignora cualquier directorio que empiece con =.=,
=_= o se llame =testdata=. Dado que las pruebas siempre se ejecutan en
el directorio donde se encuentra el archivo =_test= podemos usar la
función =Join= del paquete =path/filepath= para acceder a los datos de
prueba.

#+REVEAL: split

#+begin_src go
  func TestBytesInFile(t *testing.T) {
      l, err := BytesInFile(filepath.Join("testdata", "hello_world"))
      if err != nil {
          t.Errorf("Error %s", err)
          t.FailNow()
      }
      if l != 12 { // New line at end of file
          t.Errorf("Got wrong number of bytes %d", l)
      }
  }
#+end_src
