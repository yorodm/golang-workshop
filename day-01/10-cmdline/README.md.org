* Línea de comandos
  :PROPERTIES:
  :CUSTOM_ID: linea-de-comandos
  :END:

** Argumentos
   :PROPERTIES:
   :CUSTOM_ID: argumentos
   :END:

Interactuar con la línea de comandos es muy útil y muy común al ejecutar
scripts y programas que no tienen GUI. El paquete =os= se usa para tener
acceso a los argumentos de la línea de comandos al ejecutar un programa
de Golang.

#+REVEAL: split

Los argumentos de la línea de comandos están disponibles en el arreglo
=os.Args=:

#+begin_src go
  import "os"

  os.Args // Lista completa incluyendo el nombre del programa
  os.Args[1:] // Solo los argumentos
#+end_src

** Flags
   :PROPERTIES:
   :CUSTOM_ID: flags
   :END:

Especificar los argumentos como valores separados por espacios en la
terminal es muy básico y difícil de extender. El uso de =flags= provee
mas flexibilidad en cómo los argumentos se especifican, sobre todo los
opcionales. Golang cuenta con un paquete llamado =flag= para
soportarlos.

#+begin_src go
  import "flag"

  flag.<type>(nombre del flag, valor default, descripcion)
#+end_src

#+REVEAL: split

Un flag se define con la sintaxis anterior. El =<type>= puede ser
=string=, =int= o =bool=.

Un flag opcional se puede indicar controlando si el valor es el mismo
que el valor especificado por defecto.

Un flag se puede leer independientemente de la posición en que el
usuario los hubiera especificado.

** Environment Variables
   :PROPERTIES:
   :CUSTOM_ID: environment-variables
   :END:

Las variables de entorno se usan para configurar aspectos de sistema en
la mayoría de los *NIX y también en Windows. Son pares de clave-valor
usualmente disponibles para todos los programas que corren en la
terminal/shell. Se pueden definir variables de entorno custom solo
disponibles durante la ejecución de un script de shell.

#+REVEAL: split

El paquete =os= proporciona dos funciones, =Setenv= y =Getenv=, para
escribir y leer variables de entorno. Un string vacío se retorna si la
clave no existe.

#+begin_src go
  import "os"

  os.Setenv("FOO", "1")
  fmt.Println("FOO:", os.Getenv("FOO"))
  fmt.Println("BAR:", os.Getenv("BAR"))

//Output: FOO: 1
//        BAR:
#+end_src

#+REVEAL: split

La función =Environ= retorna la lista completa de todas las variables de
entorno existentes.

#+begin_src go
  import "strings"

  for _, e := range os.Environ() {
      pair := strings.Split(e, "=")
      fmt.Println(pair[0])
  }
#+end_src
