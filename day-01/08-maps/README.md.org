* Maps
  :PROPERTIES:
  :CUSTOM_ID: maps
  :END:

** Tipos asociativos, =map=
   :PROPERTIES:
   :CUSTOM_ID: maps-inicial
   :END:

Un =map= es un tipo de dato incluido en Golang que asocia una clave con un
valor. El valor puede ser recuperado a partir de la clave.

Un =map= vacío se crea con la función =make=:

#+begin_src go
  make(map[type of key]type of value)

  eg: make(map[string]int)
#+end_src

** Agregando valores
   :PROPERTIES:
   :CUSTOM_ID: agregando-valores
   :END:

Los valores en un =map= se referencian igual que en un arreglo. Un valor
se agrega a un =map= asignándole una clave, si la clave ya existe el valor
para esa clave se sobrescribe.

#+begin_src go
  m := make(map[string]int)
  m["a"] = 1
  m["b"] = 2

  fmt.Println(m)

// Output: map[a:1 b:2]
#+end_src

*** Inicializando un =map=

Un =map= se puede inicializar con valores en su declaración igual que un
arreglo:

#+begin_src go
  m := map[string]int {
      "a": 1,
      "b": 2,
  }
#+end_src

** Obteniendo valores
   :PROPERTIES:
   :CUSTOM_ID: retrieving-values
   :END:

Una manera de chequear si una clave existe es la siguiente:

#+begin_src go
  data, ok := m["some key"]
#+end_src

Si =ok= es =true=, la clave existe y la variable =data= contendrá la
información recuperada, si =ok= es =false= la clave no existe.

Acceder a una clave inexistente en un =map= causa un =panic=.

** Iteraciones
   :PROPERTIES:
   :CUSTOM_ID: iteraciones
   :END:

El iterador =for= se utiliza para recorrer las claves y valores de un
=map=

#+begin_src go
  m := map[string]int {
      "a": 1,
      "b": 2,
      "c": 3,
  }
  for key, value := range m {
      fmt.Println("Key:", key, " Value:", value)
  }
// Output: Key: a  Value 1
//         Key: b  Value 2
//         Key: c  Value 3
#+end_src

#+REVEAL: split

Se puede utilizar el identificador en blanco (=_=) para descartar
cualquiera de los elementos del par.

#+begin_quote
  El orden en que se recorre el =map= no esta garantizado, y cada ejecución puede tener un order diferente.
#+end_quote

** Eliminacion
   :PROPERTIES:
   :CUSTOM_ID: eliminacion
   :END:

Los valores se eliminan de un =map= con la función =delete=. La función no
retorna nada. La sintaxis es la siguiente:

#+begin_src go
  delete(m, key)
#+end_src

** Tamaño
   :PROPERTIES:
   :CUSTOM_ID: tamaño
   :END:

El tamaño de un =map= es retornado por la funcion =len=. Esta funcion
retorna la cantidad de claves que hay en un map. La sintaxis es la
siguiente:

#+begin_src go
  len(m)
#+end_src

** Tipo
   :PROPERTIES:
   :CUSTOM_ID: tipo
   :END:

Un =map= es un /tipo referencia/. Por lo tanto si un =map= se asigna a
 otra variable, ambas variable apuntan a los mismos pares (clave,
 valor). Lo mismo sucede si se pasa como argumento en una funcion.
