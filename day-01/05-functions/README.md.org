* Funciones
  :PROPERTIES:
  :CUSTOM_ID: funciones
  :END:

** Funciones en Golang
   :PROPERTIES:
   :CUSTOM_ID: golang-funcs
   :END:

Una función es un grupo de instrucciones que se ejecutan todas juntas
como un bloque. Una función puede o no tener argumentos de entrada, y
retornar valores.

En Golang una función se define con el keyword =func=. El siguiente es
un ejemplo de una función que suma dos enteros:

#+begin_src go
  func AddIntegers(a int, b int) int {
      return a + b
  }
#+end_src

** Retornando valores
   :PROPERTIES:
   :CUSTOM_ID: golang-returns
   :END:

El keyword =return= es usado para indicar qué valor va a retornar la
función.

Golang soporta que una función devuelva múltiples valores:

#+begin_src go
  func SumDifference(a int, b int) (int, int) {
      return a + b, a - b
  }
#+end_src

** Identificador en blanco
   :PROPERTIES:
   :CUSTOM_ID: blank-identifier
   :END:

Se utiliza el *identificador en blanco* en el lugar de un valor que se
quiere descartar al llamar a una función:

#+begin_src go
  var _, diff = SumDifference(10, 20)

  fmt.Println("Difference is ", diff)
#+end_src

** Valores de retorno con nombres
   :PROPERTIES:
   :CUSTOM_ID: named-return-values
   :END:

Cuando se define una función se le puede asignar un nombre al tipo de
dato de retorno para luego referenciarlo en el código de la función.

#+begin_src go
  func Product(a int, b int) (prod int) {
      prod = a * b
      return
  }
#+end_src

Al asignar un valor de retorno con nombre no hace falta incluirlo en
la sentencia =return=.

** Funciones anónimas y clausuras
   :PROPERTIES:
   :CUSTOM_ID: funciones-anónimas-y-clausuras
   :END:

Golang soporta funciones anónimas y de segundo orden. Tomemos por
ejemplo la función =sort.Slice=

#+begin_src go
func Slice(slice interface{}, less func(i, j int) bool)
#+end_src

El parámetro =less= describe una función que toma dos enteros y
retorna un valor =bool=

*** Funciones anónimas.

Podemos asignar una función a una variable o definirla en el momento
de su uso. Las funciones anónimas forman *clausuras*

#+begin_src go
c := []int{20, 11, 12, 1, 5}
less := func(i int, j int) bool {
	return c[i] < c[j]
}
sort.Slice(c, less)
fmt.Println("Despues del sort", c)
//Output: [1 5 11 12 20]
c := []int{20, 11, 12, 1, 5}
sort.Slice(c, func(i int, j int) bool {
	return c[i] < c[j]
})
fmt.Println("Despues del sort", c)
//Output: [1 5 11 12 20]
#+end_src
