* Tipos
  :PROPERTIES:
  :CUSTOM_ID: tipos
  :END:

** Tipos simples

Los siguientes tipos de datos están disponibles en Golang:

- bool
- Tipos numéricos:

  - int8, int16, int32, int64, int
  - uint8, uint16, uint32, uint64, uint
  - float32, float64
  - complex64, complex128
  - byte
  - rune
- string
- error
- chan

*** Booleanos

=bool= representa valores boleanos =true= o =false=.

*** Tipos numéricos

Para tipos numéricos, el número que sigue al tipo indica la cantidad de
bits que se usa para representar el valor en memoria. El número de bits
determina qué tan grande el número puede ser.

=int8=: 8 bit signed integers

=int16=: 16 bit entero con signo

=int32=: 32 bit entero con signo

=int=: 32 or 64 bit entero con signo (dependiende de la plataforma).

=uint= : 32 or 64 bit entero sin signo (dependiende de la plataforma).

=float32=: 32 bit número flotante.

=float64=: 64 bit número flotante.

=byte=  alias de =uint8=

=rune= alias de  =int32=

*** Números complejos

=complex64=: números complejos con parte real e imaginaria =float32=

=complex128=: números complejos con parte real e imaginaria =float64=

La función =complex= se utiliza para construir un número complejo con
partes reales e imaginarias:

#+begin_src go
  func complex(r, i FloatType) ComplexType
#+end_src

*** El tipo string

=string= es una colección de caracteres encerrados entre comillas.

#+begin_src go
  first := "Allen"
  last := "Varghese"
  name := first +" "+ last
  fmt.Println("My name is",name)
#+end_src

*** Errores y canales.

=error= es un tipo especial para indicar condiciones de error.

=chan= es un tipo especial que representa un canal de comunicación.

** Conversion de tipos
   :PROPERTIES:
   :CUSTOM_ID: conversion-de-tipos
   :END:

No hay conversión automática de tipos en Golang. Se utilizan funciones
de tipo para hacer una conversión.

#+begin_src go
  int(<float value>)
  float64(<integer value>)
#+end_src

** Constantes
   :PROPERTIES:
   :CUSTOM_ID: constantes
   :END:

Las constantes no cambian sus valores una vez asignadas. Se usa el keyword
=const= en vez de =var= para declarar una constante.

#+begin_src go
  const a bool = true
  const b int32 = 32890
  const c string = "Something"
#+end_src
