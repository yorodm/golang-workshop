* Paquetes y módulos
  :PROPERTIES:
  :CUSTOM_ID: paquetes-y-módulos
  :END:


** Paquetes

En Golang, los paquetes corresponden a los archivos en un mismo
directorio. Por convención, los paquetes llevan el nombre del
directorio que los contiene. Aunque esto no es requerido es
considerado una buena práctica.

Supongamos que creamos el proyecto =github.com/ourcompany/superproduct=

#+REVEAL: split

#+begin_example
+-- LICENSE
+-- README.md
+-- config.go  # package superproduct
+-- go.mod
+-- go.sum
+-- client
       +-- lib.go             # package client
       +-- lib_test.go        # package client
+-- cmd
       +-- super-client
           +-- main.go        # package main
       +-- super-server       # package main
           +-- main.go
+-- internal
       +-- auth
           +-- auth.go        # package auth
           +-- auth_test.go   # package auth
+-- server
       +-- lib.go             # package server
#+end_example

#+REVEAL: split

El paquete =main= tiene significado especial ya que representa el
punto de entrada de la aplicación. Como se ve en el ejemplo anterior
podemos tener más de una aplicación en un mismo proyecto Golang
(=super-client= y =super-server=).

Al menos uno de los archivos en el paquete =main= debe tener una
función =main=.

** Estructura de un proyecto

1. En la raíz se situan los archivos con funcionalidades comunes que
   se desean exportar.
2. Las funcionalidades específicas van dentro de subpaquetes (=client=
   y =server= en el ejemplo). Pueden existir varios niveles de
   subpaquetes.
3. Las funcionalidades que no son parte de nuestra API van dentro del
   paquete =internal= (Golang no permite importar =internal= o ninguno
   de sus subpaquetes desde módulos de terceros)
4. Las aplicaciones ejecutables se ubican en subpaquetes de =cmd=.


** Importando paquetes.

Para importar paquetes utilizamos *la ruta completa del paquete dentro
del módulo*

#+begin_src go
package main

import "fmt"
import "github.com/ourcompany/superproduct"
import "github.com/ourcompany/superproduct/client"

func main() {
  fmt.Println(superproduct.Config())
  fmt.Println(client.Hello())
}
#+end_src

*** Alias con =import=

Es posible usar alias para los paquetes importados

#+begin_src go
import s "github.com/ourcompany/superproduct"
#+end_src

*** Importando varios paquetes

Cuando existen varios =imports=, la convención es agruparlos.

#+begin_src go
import (
	"fmt"
	s "github.com/ourcompany/superproduct"
	"github.com/ourcompany/superproduct/client"
)
#+end_src

*** Casos especiales

Existen dos casos especiales de alias para =import=

1. El =.= incorpora todos los elementos del paquete que se importa a
   nuestro namespace.
2. El =_= no incorpora ninguno de los elementos del paquete importado
   a nuestro namespace.

** La función init

La función =init= nos permite ejecutar código de inicialización para
nuestros paquetes. A diferencia de la función =main=, puede existir más
de una función =init= por paquete.

#+begin_src go
// tomado de /github.com/lib/pq/conn.go

func init() {
	sql.Register("postgres", &Driver{})
}
#+end_src

** Reglas de visibilidad

Las reglas de visibilidad en Golang siguen un patrón sencillo.

1. Todo elemento con letra inicial mayúscula es exportado.
2. Todo elemento con letra inicial minúscula no es exportado.

En el ejemplo el tipo =square= no es exportado la función =NewSquare= si.

#+begin_src go
package geometry
type square struct {
	a int
	b int
}

func NewSquare(a, b int) *square {
	return &square{a, b}
}
#+end_src

#+REVEAL: split

Es posible para un tipo no exportado tener campos o métodos que sean
exportados.

#+begin_src go
// Area of a square
func (s square) Area() int {
	return s.a * s.b
}
#+end_src

En este caso es posible acceder a los elementos exportados aunque no
sea posible declarar explicitamente que se accede al tipo.

#+begin_src go
// Inválido porque square no es exportado
//var s *geometry.square = geometry.NewSquare(length, breadth)
s := geometry.NewSquare(length, breadth)
fmt.Println("Area is", s.Area())
#+end_src

** Módulos
   :PROPERTIES:
   :CUSTOM_ID: paquetes-y-módulos
   :END:

A partir de la versión =1.13=, Golang incluye un sistema nativo de
manejo de dependencias utilizando módulos. En versiones anteriores el
código de nuestros proyectos tenía que ubicarse en =$GOPATH/src=. Ese
enfoque es ahora considerado obsoleto

Para crear un módulo ejecutamos el siguiente comando:

#+begin_src shell
go mod init <nombre del módulo>
#+end_src

#+REVEAL: split

Por convención el nombre del módulo es la URL del repositorio de
control de versiones que alberga el código.

El sistema de módulos depende de dos archivos.

 1. =go.mod= que incluye la definición y las dependencias directas.
 2. =go.sum= que incluye las dependencias directas e indirectas con
    versiones exactas y suma de verificación.

Golang incluye el subcomando =mod= para ejecutar diferentes tareas
relacionadas con módulos. Para más detalles ejecutar

#+begin_src shell
go help mod
#+end_src

** Manejando dependencias

Existen varias formas de adicionar dependencias a nuestro módulo. La
más simple es importar la dependencia en el código y ejecutar el
siguiente comando.

#+begin_src shell
go mod tidy
#+end_src

Los entornos de desarrollo modernos y el Go Language Server hacen este
proceso de forma automática

** Referencias
   :PROPERTIES:
   :CUSTOM_ID: referencias
   :END:

- [[https://golang.org/pkg/][Golang standard library packages]]
- [[https://blog.golang.org/using-go-modules][Using Go Modules]]
- [[https://golang.org/doc/tutorial/create-module][Tutorial: Create a Go module]]
- [[https://golang.org/ref/mod][Go Modules Reference]]
